"""
Problem:
    Write a function `nearly_equal` to test whether two strings
    are nearly equal. Two strings `a` and `b` are nearly equal
    when a can be generated by `a` single mutation on `b`.

Solution:
    >>> import typing as typ
    >>> from string import ascii_lowercase
    >>> def nearly_equal(word: str, mutated_word: str) -> bool:
    ...     inserted = {f'{word[:i]}{letter}{word[i:]}' for letter in ascii_lowercase for i, _ in enumerate(word)}
    ...     deleted = {f'{word[:i]}{word[i + 1:]}' for i, _ in enumerate(word)}
    ...     replaced = {f'{word[:i]}{letter}{word[i + 1:]}' for letter in ascii_lowercase for i, _ in enumerate(word)}
    ...     swapped = {f'{word[:i]}{word[i + 1]}{word[i]}{word[i + 2:]}' for i in range(len(word) - 1)}
    ...     return mutated_word in inserted | deleted | replaced | swapped

    >>> nearly_equal('python', 'perl')
    False
    >>> nearly_equal('perl', 'pearl')
    True
    >>> nearly_equal('python', 'jython')
    True
    >>> nearly_equal('man', 'woman')
    False
"""
