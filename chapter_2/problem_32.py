"""
Problem:
    Write a function `mutate` to compute all words generated by a single
    mutation on a given word. A mutation is defined as inserting a character,
    deleting a character, replacing a character, or swapping 2 consecutive
    characters in a string. For simplicity consider only letters from `a` to `z`.

Solution:
    >>> import typing as typ
    >>> from string import ascii_lowercase
    >>> def mutate(word: str) -> typ.Set[str]:
    ...     inserted = {f'{word[:i]}{letter}{word[i:]}' for letter in ascii_lowercase for i, _ in enumerate(word)}
    ...     deleted = {f'{word[:i]}{word[i + 1:]}' for i, _ in enumerate(word)}
    ...     replaced = {f'{word[:i]}{letter}{word[i + 1:]}' for letter in ascii_lowercase for i, _ in enumerate(word)}
    ...     swapped = {f'{word[:i]}{word[i + 1]}{word[i]}{word[i + 2:]}' for i in range(len(word) - 1)}
    ...     return inserted | deleted | replaced | swapped

    >>> words = mutate('hello')
    >>> 'helo' in words
    True
    >>> 'cello' in words
    True
    >>> 'helol' in words
    True
    >>> 'ahello' in words
    True
"""
